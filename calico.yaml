# Calico Version v3.0.2
# https://docs.projectcalico.org/v3.0/releases#v3.0.2
# This manifest includes the following component versions:
#   calico/node:v3.0.2
#   calico/cni:v2.0.0
#   calico/kube-controllers:v2.0.0

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://192.168.1.80:2379,https://192.168.1.81:2379,https://192.168.1.82:2379"

  # Configure the Calico backend to use.
  calico_backend: "bird"

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
            "type": "calico",
            "etcd_endpoints": "__ETCD_ENDPOINTS__",
            "etcd_key_file": "__ETCD_KEY_FILE__",
            "etcd_cert_file": "__ETCD_CERT_FILE__",
            "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
            "log_level": "info",
            "mtu": 1500,
            "ipam": {
                "type": "calico-ipam"
            },
            "policy": {
                "type": "k8s",
                "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
            },
            "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
            }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  # Populate the following files with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # This self-hosted install expects three files with the following names.  The values
  # should be base64 encoded strings of the entire contents of each file.
  etcd-key: "LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUJPeUcvMTRHR3p4bXRjbkdNYlNUbWpsUEVzYkdyeHJ0aVB5KzhEU1BkQTZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFd1RjNFF4dlNiKytSUk5pdExPaVI4QUhJWlBDbFZlUVk1bitxeHNxc3orbFhLbkp3ZThTZwprQUZRZVJja2ZGSURvZXZRcVgya3hrdWpUUldLQTVJMjR3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo="
  etcd-cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNyakNDQVphZ0F3SUJBZ0lVYVQ4cUFpWDFwTlY3OC9GK3E1R1V6Vzc3c2Vzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNSRVV4RURBT0JnTlZCQWdUQjBoaGJXSjFjbWN4RURBT0JnTlZCQWNUQjBoaApiV0oxY21jeElUQWZCZ05WQkFvVEdGTnZiV1VnY21WaGJHeDVJRzVwWTJVZ1kyOXRjR0Z1ZVRFUE1BMEdBMVVFCkN4TUdRV1J0YVc1ek1CNFhEVEU0TURJeU1URXlNRGt3TUZvWERUSXpNREl5TURFeU1Ea3dNRm93RVRFUE1BMEcKQTFVRUF4TUdZMnhwWlc1ME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXdUYzRReHZTYisrUgpSTml0TE9pUjhBSElaUENsVmVRWTVuK3F4c3FzeitsWEtuSndlOFNna0FGUWVSY2tmRklEb2V2UXFYMmt4a3VqClRSV0tBNUkyNDZOMU1ITXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUMKTUF3R0ExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGR1llMy80ZlE5RzJiaTd6Vm9HY3BaTTl3TUxxTUI4RwpBMVVkSXdRWU1CYUFGQ1FCaVdTVmJaQVhQYko4Yy85eHNpMHBDbFdGTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQVJMVS82ZTYyNUlsVStJOXl1RzlibHBYZ1lBY2E5ZlJKT2lsVUM5QVZ5SzVUVFUyVlEwcHY4b2p0WTR0ZGoKem15VVFUd25SSkk5dENaNVQ0ZVRXZzdhRDI2clZyS1gyN0JwZ3ZNSll5a3NJU3hwcU5YaDR4aHhJbXhBMEYwMApkZUNLNmUxWGIrUEd2Tm1TQnF3eVlnVWM1VFpZOVEvQW1RZU81cnA3ZjNSckt3ZWVycUo1R2FQTi9pcHpudVgvCk5ScUVibFgxMDhEUmRhTjFQWlQ1MWxoN0tEVW1RNlR6Z2F4WTJ5Qi9NZmtJYndUZ3dSMXBTU2xoUlNjVGltZlAKQjV0Y0VxdEpoMXg0M0NUU3NxalFqYlk4Uyt5d1hyTDYrbTMvSFBOcnEzSzMzTTgwZTdnMnlJQ3dUM3ppVmZCego2L3dhNkwrRmVTR2FWSmVrUTNDaCtJZ1IKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  etcd-ca: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR2akNDQXFhZ0F3SUJBZ0lVTlVzaDZsTEpWM1VPL0c4KzlVVnhLemhrMllRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pURUxNQWtHQTFVRUJoTUNSRVV4RURBT0JnTlZCQWdUQjBoaGJXSjFjbWN4RURBT0JnTlZCQWNUQjBoaApiV0oxY21jeElUQWZCZ05WQkFvVEdGTnZiV1VnY21WaGJHeDVJRzVwWTJVZ1kyOXRjR0Z1ZVRFUE1BMEdBMVVFCkN4TUdRV1J0YVc1ek1CNFhEVEU0TURJeU1URXlNRGt3TUZvWERUSXpNREl5TURFeU1Ea3dNRm93WlRFTE1Ba0cKQTFVRUJoTUNSRVV4RURBT0JnTlZCQWdUQjBoaGJXSjFjbWN4RURBT0JnTlZCQWNUQjBoaGJXSjFjbWN4SVRBZgpCZ05WQkFvVEdGTnZiV1VnY21WaGJHeDVJRzVwWTJVZ1kyOXRjR0Z1ZVRFUE1BMEdBMVVFQ3hNR1FXUnRhVzV6Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBekwrQ3RwMHQxOVE5OHAxcmNFMVIKc1BMM2xSSUE1K2FTSDBkTXJlOTVReVdobW12b2s3Y0gxaUJ1Y1hWbTA0T3BmQzZnUXkrK0RQVUFZWU0vUWMyYgpuUENXNGdEZkt3c2RyMjlSSTd0NHZYVDB2TFNSZFV5d3NLQ0tjV01qeGdaTzV6VEtaUjl0QjJoM0dvQUpMUDYrCjA5WGFBYTc3K2RQZDR6TUk3L3JNeUNpQUpScXBFdC9JV0ZwUHg2REc5TlVsbnlPZ2NrTUl4a3JiMlBabVV0NnUKOURhZlZvblFXaHhEbTdmVlBxUUl1YzNlc1JUY3FnOVZPbXdSRDdWZUFOY2lnTHpUa0pmSDNkU1FrSW9uYjROVQpvM3M0U0lTL1FUZ01ENDdlZy9tOU05UytLMkUzM0Q3UHdSdFEzSjhyMDNRMWFhRlZpSHZNck01MGhOQ3FWOStkCkZRSURBUUFCbzJZd1pEQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFqQWQKQmdOVkhRNEVGZ1FVSkFHSlpKVnRrQmM5c254ei8zR3lMU2tLVllVd0h3WURWUjBqQkJnd0ZvQVVKQUdKWkpWdAprQmM5c254ei8zR3lMU2tLVllVd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGaUREV1B3eHUzcmRMZEREM1ZKCnBTbDZ1cHhHZHh4UFdmODJGQzlKVnFLTm0rcTk1ZUxTTmJkNy9VZ08rVkQ4ZGI1WW1pZzNHbHQyS1VXSFF6bE4KTWNHRmFsaDdiOG5QMnNpZVJNTlBONHpxajBEOEdESkRNeCszanp3SXNSd2hsc1FHZHIydWJFU0NDdFdqMkJUdgpDS1hZVDI2aTZMblZGdTUyeXQ1cHlSOGFaOGVFRkJjVk52UVpBRjN3dUpjM0x6cjZ3WlE0S3NpM25uQUdiVC9tCnV1dTNLK0t5cXg1R3BpNUZnMFdzeENuWGRya3hDd1hFR09mSUd0RnRJNG5sSTdZbDRSUDZpeUI5U2RHNSt5dHcKcHg4SmZRUVRqMkYvWnhxQ1l1Uk5SQnJtYi9zdHYvWVBDaHY2YVptT0RpYXRSanVGZzBzMTFRTGg2WVlZNmpVTwoyN2c9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"

---

# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: |
          [{"key": "dedicated", "value": "master", "effect": "NoSchedule" },
           {"key":"CriticalAddonsOnly", "operator":"Exists"}]
    spec:
      hostNetwork: true
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.0.2
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Configure the IP Pool from which Pod IPs will be chosen.
            - name: CALICO_IPV4POOL_CIDR
              value: "192.168.0.0/16"
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "1440"
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9099
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v2.0.0
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
    scheduler.alpha.kubernetes.io/tolerations: |
      [{"key": "dedicated", "value": "master", "effect": "NoSchedule" },
       {"key":"CriticalAddonsOnly", "operator":"Exists"}]
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v2.0.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system
